import java.util.ArrayList;

class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean[] visited = new boolean[V];
        boolean[] inPath = new boolean[V];

        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                if (dfscycle(adj, V, i, visited, inPath)) {
                    return true;
                }
            }
        }

        return false;
    }

    private boolean dfscycle(ArrayList<ArrayList<Integer>> graph, int V, int s, boolean[] visited, boolean[] inPath) {
        visited[s] = true;
        inPath[s] = true;

        ArrayList<Integer> nbrList = graph.get(s);
        for (int nbr : nbrList) {
            if (!visited[nbr]) {
                if (dfscycle(graph, V, nbr, visited, inPath)) {
                    return true;
                }
            } else if (inPath[nbr]) {
                return true;
            }
        }

        inPath[s] = false; // Backtrack
        return false;
    }
}
